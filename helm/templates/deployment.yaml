
{{- if and .Values.__services .Values.serviceName}}
{{- $projectName := .Values.__project_name}}
{{- $namespace := .Values.namespace | lower}}
{{- $isProduction := eq $namespace .Values.__production_namespace}}

{{- $serviceName := .Values.serviceName}}
{{- $serviceMap := index .Values.__services $serviceName}}

{{- $serviceImage := index $serviceMap "image"}}
{{- $projectImage := printf "gcr.io/%s/%s-%s:%s" .Values.__gcp_project_id .Values.__project_name $serviceImage .Values.tag}}
{{- $image := (index $serviceMap "image_in_project") | ternary $projectImage $serviceImage}}

{{- $command := index $serviceMap "command"}}

{{- $env := index $serviceMap "env"}}

{{- $pvClaimName := printf "%s-pv-claim" $serviceName}}
{{- $volumeName := printf "%s-volume" $serviceName}}
{{- $volumeConfig := index $serviceMap "persistent_volume"}}

{{- $waitForService := index $serviceMap "wait_for_service"}}
{{- $preStartupCommand := index $serviceMap "pre_startup_command"}}


{{- if $volumeConfig}}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    labels:
        app: {{$projectName}}
        run: {{$serviceName}}
    name: {{$pvClaimName}}
    namespace: {{$namespace}}
spec:
    accessModes:
      - ReadWriteOnce
    resources:
        requests:
            storage: {{index $volumeConfig "size"}}
    storageClassName: {{(index $volumeConfig "storage_class") | default "standard"}}
{{- end}}

---
apiVersion: extensions/v1beta1
kind: Deployment

metadata:
    labels:
        app: {{$projectName}}
        run: {{$serviceName}}
    name: {{$serviceName}}
    namespace: {{$namespace}}

spec:
    replicas: {{.Values.replicas | default 1}}
    selector:
        matchLabels:
            run: {{$serviceName}}
    template:
        metadata:
            labels:
                run: {{$serviceName}}
        spec:
            containers:
              - image: {{$image}}
                name: {{$serviceName}}
                ports:
                  - containerPort: {{index $serviceMap "container_port"}}

                {{- if $command}}
                command:
                  {{- range $command}}
                  - {{. | quote}}
                  {{- end}}
                {{- end}}

                env:
                  - name: NAMESPACE
                    value: {{$namespace}}

                  {{- range $key, $value := .Values.__services}}
                  - name: {{$key | upper | replace "-" "_"}}_PORT
                    value: {{$value.external_port | quote}}
                  - name: {{$key | upper | replace "-" "_"}}_HOST
                    {{- if $isProduction}}
                    value: {{$value.host | quote}}
                    {{- else}}
                    value: {{printf "%s.%s" $namespace $value.host | quote}}
                    {{- end}}
                  {{- end}}

                  {{- range $env}}
                  - name: {{.name}}
                    value: {{.value | quote}}
                  {{- end}}

                  {{- if (index $serviceMap "secrets")}}
                  {{- range (index $serviceMap "secrets" "variables")}}
                  - name: {{.}}
                    valueFrom:
                        secretKeyRef:
                            name: {{index $serviceMap "secrets" "name"}}
                            key: {{.}}
                  {{- end}}
                  {{- end}}
              
                {{- if $volumeConfig}}
                {{- $subPath := index $volumeConfig "sub_path"}}
                volumeMounts:
                  - name: {{$volumeName}}
                    mountPath: {{index $volumeConfig "mount_path"}}
                    {{- if $subPath}}
                    subPath: {{$subPath}}
                    {{- end}}
                {{- end}}
              
            {{- if $volumeConfig}}
            volumes:
              - name: {{$volumeName}}
                persistentVolumeClaim:
                    claimName: {{$pvClaimName}}
            {{- end}}

            {{- if or $waitForService $preStartupCommand}}
            initContainers:
              {{- if $waitForService}}
              - name: wait-for-service
                image: busybox
                command: ["sh", "-c", {{printf "until nslookup %s; do echo waiting for %s; sleep 2; done;" $waitForService $waitForService | quote}}]
              {{- end}}
              
              {{- if $preStartupCommand}}
              - name: pre-startup
                image: {{$image}}
                command: ["sh", "-c", {{$preStartupCommand | quote}}]
                {{- if $env}}
                env:
                  {{- range $env}}
                  - name: {{.name}}
                    value: {{.value | quote}}
                  {{- end}}
                {{- end}}
              {{- end}}
            {{- end}}
{{- end}}

